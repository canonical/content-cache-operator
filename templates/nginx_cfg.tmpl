proxy_cache_path {{cache_path}}/{{site}} use_temp_path=off levels=1:2 keys_zone={{keys_zone}}:10m {% if cache_inactive_time %}inactive={{cache_inactive_time}} {% endif %}max_size={{cache_max_size}};

server {
    server_name {{site_name}};
    listen {% if address %}{{address}}:{% endif %}{{port}}{% if reuseport %} reuseport{% endif %};

    port_in_redirect off;
    absolute_redirect off;

{%- if extra_configs %}

    # Extra server configs
{%- for extra in extra_configs %}
    {{extra}}
{%- endfor -%}

{%- endif %}
{%- for location, conf in locations.items() %}

    location {% if conf['modifier'] %}{{conf['modifier']}} {% endif %}{{ location }} {
{%- if conf['backend'] %}
        proxy_http_version 1.1;
        proxy_pass {{conf['backend']}};
        proxy_set_header Host "{{site_name}}";
        # Removed the following headers to avoid cache poisoning.
        proxy_set_header Forwarded "";
        proxy_set_header X-Forwarded-Host "";
        proxy_set_header X-Forwarded-Port "";
        proxy_set_header X-Forwarded-Proto "";
        proxy_set_header X-Forwarded-Scheme "";

        add_header X-Cache-Status "$upstream_cache_status from {{juju_unit}}";
{%- if 'cache' in conf %}
        proxy_cache {{conf['cache']}};
{%- else %}
        proxy_cache {{keys_zone}};
{%- endif %}
{%- for key, value in conf.items()|sort(attribute='0') -%}
{%- if key.startswith('cache-') and value != 'None' %}
        {%- if key == 'cache-valid' %}
            {%- for cache_valid in value %}
        proxy_cache_valid {{cache_valid}};
            {%- endfor -%}
        {%- else %}
        proxy_{{key|replace("-", "_")}} {{value}};
        {%- endif %}
{%- endif %}
{%- endfor %}
        proxy_force_ranges {{conf['force_ranges']}};
{%- endif %}

{%- if conf['origin-headers'] %}
{%- for header_pair in conf['origin-headers'] -%}
{% for header, value in header_pair.items() %}
        proxy_set_header {{header}} '{{value}}';
{%- endfor -%}
{%- endfor -%}
{%- endif %}

{%- if conf['extra-configs'] %}
{%- for extra in conf['extra-configs'] %}
        {{extra}}
{%- endfor -%}
{%- endif %}

{%- if conf['signed-url-hmac-key'] %}

        access_by_lua_block {
            local hmac_key = "{{conf['signed-url-hmac-key']}}"

            local uri = ngx.var.uri
            local args = ngx.var.args

            local args, err = ngx.req.get_uri_args(0)
            if err then
                ngx.log(ngx.WARN, "unable to get args")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local token = args["token"]
            if not token then
                ngx.log(ngx.WARN, "request contains no token")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local m = ngx.re.match(token, [[^(?<expiry>[0-9]+)_(?<signature>[0-9a-fA-F]+)$]])
            if not m then
                ngx.log(ngx.WARN, "request contains invalid token")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local expiry = tonumber(m["expiry"])
            if not expiry then
                ngx.log(ngx.WARN, "invalid expiry time")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local digest = ngx.hmac_sha1(hmac_key, uri .. expiry)
            local digest_hex = ""
            for i = 1, string.len(digest) do
                local ord = string.byte(digest, i)
                digest_hex = digest_hex .. string.format("%02x", ord)
            end

            local signature = m["signature"]
            if string.len(digest_hex) ~= string.len(signature) then
                ngx.log(ngx.WARN, "invalid signature")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            digest_valid = true
            for i = 1, string.len(digest_hex) do
                local b1 = string.byte(digest_hex, i)
                local b2 = string.byte(signature, i)
                digest_valid = digest_valid and b1 == b2
            end

            if not digest_valid then
                ngx.log(ngx.WARN, "invalid signature")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            if ngx.now() > expiry then
                ngx.log(ngx.WARN, "request token has expired")
                return ngx.exit(410)
            end

            args["token"] = nil
            ngx.req.set_uri_args(args)
            {%- if enable_prometheus_metrics %}

            -- Exclude healthchecks from nginx_cache_request_total metric.
            from, to = ngx.re.find(ngx.var.uri, "^/check/?")
            if not from then
                cache_request_total:inc(1, {ngx.var.server_name})
            end
            {%- endif %}
        }
{%- elif enable_prometheus_metrics %}

        access_by_lua_block {
            -- Exclude healthchecks from nginx_cache_request_total metric.
            from, to = ngx.re.find(ngx.var.uri, "^/check/?")
            if not from then
                cache_request_total:inc(1, {ngx.var.server_name})
            end
        }
{%- endif %}
{%- if enable_prometheus_metrics %}

        log_by_lua_block {
          http_request_total:inc(1, {ngx.var.server_name, ngx.var.status})
          if ngx.var.upstream_cache_status == "HIT" then
              cache_request_hit_total:inc(1, {ngx.var.server_name})
          end
        }
{%- endif %}
    }
{% endfor %}

    access_log {% if disable_logging %}off{% else %}/var/log/nginx/{{site_name}}-access.log content_cache{% endif %};
    error_log /var/log/nginx/{{site_name}}-error.log;
}

