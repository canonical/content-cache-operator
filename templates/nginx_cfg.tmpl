proxy_cache_path {{cache_path}}/{{site}} use_temp_path=off levels=1:2 keys_zone={{name}}-cache:10m max_size={{cache_max_size}};

server {
    server_name {{site}};
    listen {% if address %}{{address}}:{% endif %}{{port}};

    port_in_redirect off;
    absolute_redirect off;

{%- for location, conf in locations.items() %}

    location {% if conf['modifier'] %}{{conf['modifier']}} {% endif %}{{ location }} {
{%- if conf['backend'] %}
        proxy_pass {{conf['backend']}};
        proxy_set_header Host "{{site}}";
        proxy_cache {{name}}-cache;
{%- for key, value in conf.items() -%}
{%- if key.startswith('cache-') and value != 'None' %}
        proxy_{{key|replace("-", "_")}} {{value}};
{%- endif %}
{%- endfor -%}
{%- endif %}

{%- if conf['origin-headers'] %}
{%- for header_pair in conf['origin-headers'] -%}
{% for header, value in header_pair.items() %}
        proxy_set_header {{header}} '{{value}}';
{%- endfor -%}
{%- endfor -%}
{%- endif %}

{%- if conf['extra-config'] %}
{%- for extra in conf['extra-config'] %}
        {{extra}};
{%- endfor -%}
{%- endif %}

{%- if conf['signed-url-hmac-key'] %}

        access_by_lua_block {
            local hmac_key = "{{conf['signed-url-hmac-key']}}"

            local uri = ngx.var.uri
            local args = ngx.var.args

            local args, err = ngx.req.get_uri_args(0)
            if err then
                ngx.log(ngx.WARN, "unable to get args")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local token = args["token"]
            if not token then
                ngx.log(ngx.WARN, "request contains no token")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local m = ngx.re.match(token, [[^(?<expiry>[0-9]+)_(?<signature>[0-9a-fA-F]+)$]])
            if not m then
                ngx.log(ngx.WARN, "request contains invalid token")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local expiry = tonumber(m["expiry"])
            if not expiry then
                ngx.log(ngx.WARN, "invalid expiry time")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            local digest = ngx.hmac_sha1(hmac_key, uri .. expiry)
            local digest_hex = ""
            for i = 1, string.len(digest) do
                local ord = string.byte(digest, i)
                digest_hex = digest_hex .. string.format("%02x", ord)
            end

            local signature = m["signature"]
            if string.len(digest_hex) ~= string.len(signature) then
                ngx.log(ngx.WARN, "invalid signature")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            digest_valid = true
            for i = 1, string.len(digest_hex) do
                local b1 = string.byte(digest_hex, i)
                local b2 = string.byte(signature, i)
                digest_valid = digest_valid and b1 == b2
            end

            if not digest_valid then
                ngx.log(ngx.WARN, "invalid signature")
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            if ngx.now() > expiry then
                ngx.log(ngx.WARN, "request token has expired")
                return ngx.exit(410)
            end

            args["token"] = nil
            ngx.req.set_uri_args(args)
        }
{%- endif %}
{%- if enable_prometheus_metrics %}

        log_by_lua_block {
          http_request_total:inc(1, {ngx.var.server_name, ngx.var.status})
          if ngx.var.upstream_cache_status == "HIT" then
              cache_request_hit_total:inc(1, {ngx.var.server_name})
          end
        }
{%- endif %}
    }
{% endfor %}

    access_log /var/log/nginx/{{site}}-access.log content_cache;
    error_log /var/log/nginx/{{site}}-error.log;
}

