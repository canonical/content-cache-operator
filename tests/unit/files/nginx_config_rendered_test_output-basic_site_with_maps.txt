proxy_cache_path /var/lib/nginx/proxy/basic_site_with_maps use_temp_path=off levels=1:2 keys_zone=2fe6e6303546-cache:10m inactive=2h max_size=1g;

map $original_redirect_location $new_redirect_path {
    "~^(http|https):\/\/(.*?)(\/.*)$" $3;
}

server {
    server_name basic_site_with_maps;
    listen 127.0.0.1:6080;

    port_in_redirect off;
    absolute_redirect off;

    location / {
        proxy_cache 2fe6e6303546-cache;
        proxy_http_version 1.1;
        proxy_pass http://localhost:8080;
        proxy_set_header Host "basic_site_with_maps";
        # Removed the following headers to avoid cache poisoning.
        proxy_set_header Forwarded "";
        proxy_set_header X-Forwarded-Host "";
        proxy_set_header X-Forwarded-Port "";
        proxy_set_header X-Forwarded-Proto "";
        proxy_set_header X-Forwarded-Scheme "";

        add_header X-Cache-Status "$upstream_cache_status from mock-content-cache/0";
        proxy_cache_background_update off;
        proxy_cache_lock off;
        proxy_cache_min_uses 1;
        proxy_cache_revalidate on;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_valid 200 1d;
        proxy_force_ranges on;

        access_by_lua_block {
            -- Exclude healthchecks from nginx_cache_request_total metric.
            from, to = ngx.re.find(ngx.var.uri, "^/check/?")
            if not from then
                cache_request_total:inc(1, {ngx.var.server_name})
            end
        }

        log_by_lua_block {
          http_request_total:inc(1, {ngx.var.server_name, ngx.var.status})
          if ngx.var.upstream_cache_status == "HIT" then
              cache_request_hit_total:inc(1, {ngx.var.server_name})
          end
        }
    }

    location /_status/content-cache-check {
        stub_status;
    }

    access_log /var/log/nginx/basic_site_with_maps-access.log content_cache;
    error_log /var/log/nginx/basic_site_with_maps-error.log;
}
